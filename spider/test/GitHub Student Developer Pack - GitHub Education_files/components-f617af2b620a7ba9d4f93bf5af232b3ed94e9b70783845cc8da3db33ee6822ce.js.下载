(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.AutocompleteElement = {}));
}(this, (function (exports) { 'use strict';

  class AutocompleteEvent extends CustomEvent {
    constructor(type, init) {
      super(type, init);
      this.relatedTarget = init.relatedTarget;
    }

  }

  function debounce(callback, wait) {
    let timeout;
    return function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      clearTimeout(timeout);
      timeout = setTimeout(() => {
        clearTimeout(timeout);
        callback(...args);
      }, wait);
    };
  }

  const requests = new WeakMap();
  function fragment(el, url) {
    const xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.setRequestHeader('Accept', 'text/html; fragment, text/fragment+html');
    return request(el, xhr);
  }

  function request(el, xhr) {
    const pending = requests.get(el);
    if (pending) pending.abort();
    requests.set(el, xhr);

    const clear = () => requests.delete(el);

    const result = send(xhr);
    result.then(clear, clear);
    return result;
  }

  function send(xhr) {
    return new Promise((resolve, reject) => {
      xhr.onload = function () {
        if (xhr.status >= 200 && xhr.status < 300) {
          resolve(xhr.responseText);
        } else {
          reject(new Error(xhr.responseText));
        }
      };

      xhr.onerror = reject;
      xhr.send();
    });
  }

  function scrollTo(container, target) {
    if (!inViewport(container, target)) {
      container.scrollTop = target.offsetTop;
    }
  }

  function inViewport(container, element) {
    const scrollTop = container.scrollTop;
    const containerBottom = scrollTop + container.clientHeight;
    const top = element.offsetTop;
    const bottom = top + element.clientHeight;
    return top >= scrollTop && bottom <= containerBottom;
  }

  function install(input, list) {
    input.addEventListener('compositionstart', trackComposition);
    input.addEventListener('compositionend', trackComposition);
    input.addEventListener('keydown', keyboardBindings);
    list.addEventListener('click', commitWithElement);
  }

  function uninstall(input, list) {
    input.removeAttribute('aria-activedescendant');
    input.removeEventListener('compositionstart', trackComposition);
    input.removeEventListener('compositionend', trackComposition);
    input.removeEventListener('keydown', keyboardBindings);
    list.removeEventListener('click', commitWithElement);
  }

  let isComposing = false;
  const ctrlBindings = !!navigator.userAgent.match(/Macintosh/);

  function keyboardBindings(event) {
    if (event.shiftKey || event.metaKey || event.altKey) return;
    const input = event.currentTarget;
    if (!(input instanceof HTMLTextAreaElement || input instanceof HTMLInputElement)) return;
    if (isComposing) return;
    const list = document.getElementById(input.getAttribute('aria-owns') || '');
    if (!list) return;

    switch (event.key) {
      case 'Enter':
      case 'Tab':
        if (commit(input, list)) {
          event.preventDefault();
        }

        break;

      case 'Escape':
        clearSelection(input, list);
        break;

      case 'ArrowDown':
        navigate(input, list, 1);
        event.preventDefault();
        break;

      case 'ArrowUp':
        navigate(input, list, -1);
        event.preventDefault();
        break;

      case 'n':
        if (ctrlBindings && event.ctrlKey) {
          navigate(input, list, 1);
          event.preventDefault();
        }

        break;

      case 'p':
        if (ctrlBindings && event.ctrlKey) {
          navigate(input, list, -1);
          event.preventDefault();
        }

        break;
    }
  }

  function commitWithElement(event) {
    if (!(event.target instanceof Element)) return;
    const target = event.target.closest('[role="option"]');
    if (!target) return;
    if (target.getAttribute('aria-disabled') === 'true') return;
    fireCommitEvent(target);
  }

  function commit(input, list) {
    const target = list.querySelector('[aria-selected="true"]');
    if (!target) return false;
    if (target.getAttribute('aria-disabled') === 'true') return true;
    target.click();
    return true;
  }

  function fireCommitEvent(target) {
    target.dispatchEvent(new CustomEvent('combobox-commit', {
      bubbles: true
    }));
  }

  function navigate(input, list) {
    let indexDiff = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    const focusEl = list.querySelector('[aria-selected="true"]');
    const els = Array.from(list.querySelectorAll('[role="option"]'));
    const focusIndex = els.indexOf(focusEl);
    let indexOfItem = indexDiff === 1 ? 0 : els.length - 1;

    if (focusEl && focusIndex >= 0) {
      const newIndex = focusIndex + indexDiff;
      if (newIndex >= 0 && newIndex < els.length) indexOfItem = newIndex;
    }

    const target = els[indexOfItem];
    if (!target) return;

    for (const el of els) {
      if (target === el) {
        input.setAttribute('aria-activedescendant', target.id);
        target.setAttribute('aria-selected', 'true');
        scrollTo(list, target);
      } else {
        el.setAttribute('aria-selected', 'false');
      }
    }
  }

  function clearSelection(input, list) {
    input.removeAttribute('aria-activedescendant');

    for (const el of list.querySelectorAll('[aria-selected="true"]')) {
      el.setAttribute('aria-selected', 'false');
    }
  }

  function trackComposition(event) {
    const input = event.currentTarget;
    if (!(input instanceof HTMLTextAreaElement || input instanceof HTMLInputElement)) return;
    isComposing = event.type === 'compositionstart';
    const list = document.getElementById(input.getAttribute('aria-owns') || '');
    if (!list) return;
    clearSelection(input, list);
  }

  class Autocomplete {
    constructor(container, input, results) {
      this.container = container;
      this.input = input;
      this.results = results;
      this.results.hidden = true;
      this.input.setAttribute('autocomplete', 'off');
      this.input.setAttribute('spellcheck', 'false');
      this.interactingWithList = false;
      this.onInputChange = debounce(this.onInputChange.bind(this), 300);
      this.onResultsMouseDown = this.onResultsMouseDown.bind(this);
      this.onInputBlur = this.onInputBlur.bind(this);
      this.onInputFocus = this.onInputFocus.bind(this);
      this.onKeydown = this.onKeydown.bind(this);
      this.onCommit = this.onCommit.bind(this);
      this.input.addEventListener('keydown', this.onKeydown);
      this.input.addEventListener('focus', this.onInputFocus);
      this.input.addEventListener('blur', this.onInputBlur);
      this.input.addEventListener('input', this.onInputChange);
      this.results.addEventListener('mousedown', this.onResultsMouseDown);
      this.results.addEventListener('combobox-commit', this.onCommit);
    }

    destroy() {
      this.input.removeEventListener('keydown', this.onKeydown);
      this.input.removeEventListener('focus', this.onInputFocus);
      this.input.removeEventListener('blur', this.onInputBlur);
      this.input.removeEventListener('input', this.onInputChange);
      this.results.removeEventListener('mousedown', this.onResultsMouseDown);
      this.results.removeEventListener('combobox-commit', this.onCommit);
    }

    onKeydown(event) {
      if (event.key === 'Escape' && this.container.open) {
        this.container.open = false;
        event.stopPropagation();
        event.preventDefault();
      }
    }

    onInputFocus() {
      this.fetchResults();
    }

    onInputBlur() {
      if (this.interactingWithList) {
        this.interactingWithList = false;
        return;
      }

      this.container.open = false;
    }

    onCommit(_ref) {
      let {
        target
      } = _ref;
      const selected = target;
      if (!(selected instanceof HTMLElement)) return;
      this.container.open = false;
      if (selected instanceof HTMLAnchorElement) return;
      const value = selected.getAttribute('data-autocomplete-value') || selected.textContent;
      this.container.value = value;
    }

    onResultsMouseDown() {
      this.interactingWithList = true;
    }

    onInputChange() {
      this.container.removeAttribute('value');
      this.fetchResults();
    }

    identifyOptions() {
      let id = 0;

      for (const el of this.results.querySelectorAll('[role="option"]:not([id])')) {
        el.id = "".concat(this.results.id, "-option-").concat(id++);
      }
    }

    fetchResults() {
      const query = this.input.value.trim();

      if (!query) {
        this.container.open = false;
        return;
      }

      const src = this.container.src;
      if (!src) return;
      const url = new URL(src, window.location.href);
      const params = new URLSearchParams(url.search.slice(1));
      params.append('q', query);
      url.search = params.toString();
      this.container.dispatchEvent(new CustomEvent('loadstart'));
      fragment(this.input, url.toString()).then(html => {
        this.results.innerHTML = html;
        this.identifyOptions();
        const hasResults = !!this.results.querySelector('[role="option"]');
        this.container.open = hasResults;
        this.container.dispatchEvent(new CustomEvent('load'));
        this.container.dispatchEvent(new CustomEvent('loadend'));
      }).catch(() => {
        this.container.dispatchEvent(new CustomEvent('error'));
        this.container.dispatchEvent(new CustomEvent('loadend'));
      });
    }

    open() {
      if (!this.results.hidden) return;
      install(this.input, this.results);
      this.results.hidden = false;
      this.container.setAttribute('aria-expanded', 'true');
    }

    close() {
      if (this.results.hidden) return;
      uninstall(this.input, this.results);
      this.results.hidden = true;
      this.input.removeAttribute('aria-activedescendant');
      this.container.setAttribute('aria-expanded', 'false');
    }

  }

  const state = new WeakMap();
  class AutocompleteElement extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      const owns = this.getAttribute('aria-owns');
      if (!owns) return;
      const input = this.querySelector('input');
      const results = document.getElementById(owns);
      if (!(input instanceof HTMLInputElement) || !results) return;
      input.setAttribute('aria-owns', owns);
      state.set(this, new Autocomplete(this, input, results));
      this.setAttribute('role', 'combobox');
      this.setAttribute('aria-haspopup', 'listbox');
      this.setAttribute('aria-expanded', 'false');
      input.setAttribute('aria-autocomplete', 'list');
      input.setAttribute('aria-controls', owns);
      results.setAttribute('role', 'listbox');
    }

    disconnectedCallback() {
      const autocomplete = state.get(this);

      if (autocomplete) {
        autocomplete.destroy();
        state.delete(this);
      }
    }

    get src() {
      return this.getAttribute('src') || '';
    }

    set src(url) {
      this.setAttribute('src', url);
    }

    get value() {
      return this.getAttribute('value') || '';
    }

    set value(value) {
      this.setAttribute('value', value);
    }

    get open() {
      return this.hasAttribute('open');
    }

    set open(value) {
      if (value) {
        this.setAttribute('open', '');
      } else {
        this.removeAttribute('open');
      }
    }

    static get observedAttributes() {
      return ['open', 'value'];
    }

    attributeChangedCallback(name, oldValue, newValue) {
      if (oldValue === newValue) return;
      const autocomplete = state.get(this);
      if (!autocomplete) return;

      switch (name) {
        case 'open':
          newValue === null ? autocomplete.close() : autocomplete.open();
          break;

        case 'value':
          if (newValue !== null) {
            autocomplete.input.value = newValue;
          }

          this.dispatchEvent(new AutocompleteEvent('auto-complete-change', {
            bubbles: true,
            relatedTarget: autocomplete.input
          }));
          break;
      }
    }

  }

  if (!window.customElements.get('auto-complete')) {
    window.AutocompleteElement = AutocompleteElement;
    window.customElements.define('auto-complete', AutocompleteElement);
  }

  exports.AutocompleteEvent = AutocompleteEvent;
  exports.default = AutocompleteElement;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.ClipboardCopyElement = factory());
}(this, function () { 'use strict';

  function createNode(text) {
    const node = document.createElement('pre');
    node.style.width = '1px';
    node.style.height = '1px';
    node.style.position = 'fixed';
    node.style.top = '5px';
    node.textContent = text;
    return node;
  }

  function copyNode(node) {
    if ('clipboard' in navigator) {
      // eslint-disable-next-line flowtype/no-flow-fix-me-comments
      // $FlowFixMe Clipboard is not defined in Flow yet.
      return navigator.clipboard.writeText(node.textContent);
    }

    const selection = getSelection();

    if (selection == null) {
      return Promise.reject(new Error());
    }

    selection.removeAllRanges();
    const range = document.createRange();
    range.selectNodeContents(node);
    selection.addRange(range);
    document.execCommand('copy');
    selection.removeAllRanges();
    return Promise.resolve();
  }
  function copyText(text) {
    if ('clipboard' in navigator) {
      // eslint-disable-next-line flowtype/no-flow-fix-me-comments
      // $FlowFixMe Clipboard is not defined in Flow yet.
      return navigator.clipboard.writeText(text);
    }

    const body = document.body;

    if (!body) {
      return Promise.reject(new Error());
    }

    const node = createNode(text);
    body.appendChild(node);
    copyNode(node);
    body.removeChild(node);
    return Promise.resolve();
  }

  function copy(button) {
    const id = button.getAttribute('for');
    const text = button.getAttribute('value');

    function trigger() {
      button.dispatchEvent(new CustomEvent('clipboard-copy', {
        bubbles: true
      }));
    }

    if (text) {
      copyText(text).then(trigger);
    } else if (id) {
      const root = 'getRootNode' in Element.prototype ? button.getRootNode() : button.ownerDocument;
      if (!(root instanceof Document || 'ShadowRoot' in window && root instanceof ShadowRoot)) return;
      const node = root.getElementById(id);
      if (node) copyTarget(node).then(trigger);
    }
  }

  function copyTarget(content) {
    if (content instanceof HTMLInputElement || content instanceof HTMLTextAreaElement) {
      return copyText(content.value);
    } else if (content instanceof HTMLAnchorElement && content.hasAttribute('href')) {
      return copyText(content.href);
    } else {
      return copyNode(content);
    }
  }

  function clicked(event) {
    const button = event.currentTarget;

    if (button instanceof HTMLElement) {
      copy(button);
    }
  }

  function keydown(event) {
    if (event.key === ' ' || event.key === 'Enter') {
      const button = event.currentTarget;

      if (button instanceof HTMLElement) {
        event.preventDefault();
        copy(button);
      }
    }
  }

  function focused(event) {
    event.currentTarget.addEventListener('keydown', keydown);
  }

  function blurred(event) {
    event.currentTarget.removeEventListener('keydown', keydown);
  }

  class ClipboardCopyElement extends HTMLElement {
    constructor() {
      super();
      this.addEventListener('click', clicked);
      this.addEventListener('focus', focused);
      this.addEventListener('blur', blurred);
    }

    connectedCallback() {
      if (!this.hasAttribute('tabindex')) {
        this.setAttribute('tabindex', '0');
      }

      if (!this.hasAttribute('role')) {
        this.setAttribute('role', 'button');
      }
    }

    get value() {
      return this.getAttribute('value') || '';
    }

    set value(text) {
      this.setAttribute('value', text);
    }

  }

  if (!window.customElements.get('clipboard-copy')) {
    window.ClipboardCopyElement = ClipboardCopyElement;
    window.customElements.define('clipboard-copy', ClipboardCopyElement);
  }

  return ClipboardCopyElement;

}));


